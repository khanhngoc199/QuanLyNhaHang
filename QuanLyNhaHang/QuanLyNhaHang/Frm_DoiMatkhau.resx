<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBsjYugbY79n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/6Bt
        jv2gbo2JAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn22N/cyyqv/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/zLGq/6BtjvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI3/0Les/6d3kf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/p3iS/9C3
        rP+nd5H/n2yN/6d4kv/Qt6z/n2yN/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf/Qt6z/0Les/9C3
        rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP+fbI3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2yN/9C3
        rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/59sjf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACfbI3/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/wJ6i/6V/mP+fb4//n2+P/6V/
        mf/Bn6L/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/n2yN/wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJ9sjf/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/7SSnv+ddpb/gKvT/3q5
        4/97uOP/garT/512lv+2kp//0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP+fbI3/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAn2yN/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3rP/BoaP/nHqa/4Gp
        0v9+td7/kKHD/5Chw/99tuD/frDa/512lv/CoaP/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/59s
        jf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI3/0Les/9C3rP/Qt6z/0Les/9C3rP/Qt6z/0Les/6Z/
        mP+Aq9X/frXf/519nf+c1Or/nNTq/557m/9/stv/gKrS/6aAmf/Qt6z/0Les/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/n2yN/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf/XvrP/0bit/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/n2+Q/3y03v+QpMf/m9nv/5vr//+b6///nNbt/4+kx/99s97/oHCQ/9C3rP/Qt6z/0Les/9C3
        rP/Qt6z/0bit/9e/s/+fbI3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2yN/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv+gcZD/fLTe/5GewP+c2u//m+v//5vr//+c2u//kZ7A/3yz3v+gcZH/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/59sjf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI3/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/6qDnP+Aq9P/frXf/56Bof+b2vD/nNvw/52Cof9/s9z/gKrS/6uE
        nf/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/n2yN/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9s
        jf/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/0K2x/513l/+CqdL/f7Ha/5Chw/+QocP/frTe/4Ol
        zv+ed5f/0a+x/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv+fbI3/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAn2yN/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/u5em/513l/+Aq9P/fbDb/3yx
        3P+BqtT/nnma/72Ypv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/59sjf8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfbI3/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/0K2x/6qD
        nf+gc5L/oHOS/6mEnf/QrrH/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/n2yN/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjf/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv+fbI3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoG2O++HFvv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fNwv/nzcL/583C/+fN
        wv/nzcL/4cS9/6BtjvoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfa4yKoG2O+p9sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbY76n22NiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9s
        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
        +H/+D/B//gfgf/8AAP//gAH//8AD///4H/8=
</value>
  </data>
</root>